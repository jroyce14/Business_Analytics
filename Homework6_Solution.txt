# Practicing with Unix

This assignment will give you some practice navigating around the terminal
and using some of the commands we have talked about. Because we will be
working with the terminal throughout the entirety of this program and you
will be building up familiarity with it throughout the program, this
assignment will be fairly brief.

1. Open up your terminal and navigate to your root directory.

 `cd` or `cd ~`

2. In your root directory, create a new directory called
`test_directory`.

 `mkdir test_directory`

3. Navigate into `test_directory`, and print the working directory
to the screen. Is the pathname printed to the screen an absolute path
or relative path?

 ```bash
 cd test_directory
 pwd
 ```

 The path printed to the screen is an absolute path. You can tell because it is prefixed with a `/`.

4. Create two files, calling them `test_file1.txt` and `test_file2.txt`.

 ```bash
 touch test_file1.txt test_file2.txt
 ```

5. Use `ls` to make sure that the files are in fact in the directory.

 `ls`

 You should see both of the files `test_file1.txt` and `test_file2.txt` present.

6. Copy `test_file1.txt` to a new file, calling it `test_file3.txt`. How
many files are there in your directory now?

 `cp test_file1.txt test_file3.txt`

 There should now be three files in your directory - `test_file1.txt`,
 `test_file2.txt`, and `test_file3.txt`.

7. Rename `test_file3.txt` to `test_file4.txt`. How many files are there
in your directory now?

 `mv test_file3.txt test_file4.txt`

 There should still be only 3 files in your directory - `test_file1.txt`,
 `test_file2.txt`, and `test_file4.txt`.

8. Within `test_directory`, create a new directory called `inner_directory`.

 `mkdir inner_directory`

9. In one command, move all of the files from `test_directory` into the
`inner_directory`.

 `mv test_file1.txt test_file2.txt test_file4.txt inner_directory`

10. In one command, delete `inner_directory` and all its contents.

 `rm -r inner_directory`

11. Navigate back to your root directory, and delete `test_directory` using
`rmdir`. Why does `rmdir` work here (**Hint**: Think about what's left in
`test_directory`)?

 ```bash
 cd
 rmdir test_directory
 ```
